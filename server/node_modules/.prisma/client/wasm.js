
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  username: 'username',
  passwordHash: 'passwordHash',
  totalPoints: 'totalPoints',
  totalWins: 'totalWins',
  totalCorrectPairs: 'totalCorrectPairs',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MatchScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  finishedAt: 'finishedAt',
  p1Id: 'p1Id',
  p2Id: 'p2Id',
  winnerId: 'winnerId',
  boardSize: 'boardSize',
  p1Score: 'p1Score',
  p2Score: 'p2Score'
};

exports.Prisma.MatchEventScalarFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  type: 'type',
  payload: 'payload',
  ts: 'ts'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  username: 'username',
  passwordHash: 'passwordHash'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.MatchOrderByRelevanceFieldEnum = {
  id: 'id',
  p1Id: 'p1Id',
  p2Id: 'p2Id',
  winnerId: 'winnerId'
};

exports.Prisma.MatchEventOrderByRelevanceFieldEnum = {
  id: 'id',
  matchId: 'matchId',
  type: 'type',
  payload: 'payload'
};


exports.Prisma.ModelName = {
  User: 'User',
  Match: 'Match',
  MatchEvent: 'MatchEvent'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "D:\\project-root\\server\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "D:\\project-root\\server\\src\\db\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../src/db",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "datasource db {\n  provider = \"mysql\" // ← đổi từ sqlite sang mysql\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel User {\n  id                String   @id @default(cuid())\n  username          String   @unique\n  passwordHash      String\n  totalPoints       Int      @default(0)\n  totalWins         Int      @default(0)\n  totalCorrectPairs Int      @default(0)\n  matchesP1         Match[]  @relation(\"p1\")\n  matchesP2         Match[]  @relation(\"p2\")\n  createdAt         DateTime @default(now())\n  updatedAt         DateTime @updatedAt\n}\n\nmodel Match {\n  id         String    @id @default(cuid())\n  createdAt  DateTime  @default(now())\n  finishedAt DateTime?\n  p1Id       String\n  p2Id       String\n  winnerId   String?\n  boardSize  Int\n  p1Score    Int       @default(0)\n  p2Score    Int       @default(0)\n\n  p1 User @relation(\"p1\", fields: [p1Id], references: [id])\n  p2 User @relation(\"p2\", fields: [p2Id], references: [id])\n\n  events MatchEvent[]\n\n  @@index([boardSize])\n}\n\nmodel MatchEvent {\n  id      String   @id @default(cuid())\n  matchId String\n  type    String\n  payload String // JSON\n  ts      DateTime @default(now())\n  match   Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)\n\n  @@index([matchId, ts])\n}\n",
  "inlineSchemaHash": "6d287d49a21620067db2bccd320e9c2389a4189e2bfb1e92092a1c0d866a8f37",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"passwordHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalPoints\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalWins\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalCorrectPairs\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"matchesP1\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"p1\"},{\"name\":\"matchesP2\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"p2\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Match\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"finishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"p1Id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"p2Id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"winnerId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"boardSize\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"p1Score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"p2Score\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"p1\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"p1\"},{\"name\":\"p2\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"p2\"},{\"name\":\"events\",\"kind\":\"object\",\"type\":\"MatchEvent\",\"relationName\":\"MatchToMatchEvent\"}],\"dbName\":null},\"MatchEvent\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"matchId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payload\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"ts\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"match\",\"kind\":\"object\",\"type\":\"Match\",\"relationName\":\"MatchToMatchEvent\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

